#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from argcomplete import autocomplete
from argparse import ArgumentParser
import pathlib
from subprocess import check_call
import sys
from urllib.parse import unquote, urlparse


class DBConsole(object):
    def __init__(self, url):
        self.url = url

    @classmethod
    def from_url(cls, url):
        parsed = urlparse(url)
        return BINARIES[parsed.scheme](parsed)

    def run_console(self, cmd):
        cmd = cmd.format(user=self.url.username, password=unquote(self.url.password),
                         host=self.url.hostname, database=self.url.path[1:])
        check_call(cmd, shell=True)


class MySQLConsole(DBConsole):
    def run(self):
        if self.url.password:
            self.run_console('mysql -u {user} -p{password} -h {host} {database}')
        else:
            self.run_console('mysql -u {user} -h {host} {database}')


class PostgresConsole(DBConsole):
    def run(self):
        self.run_console('psql {}'.format(self.url.geturl()))


class Pgtop(DBConsole):
    def run(self):
        cmd = 'PGPASSWORD={password} pg_top -U {user} -h {host} -d {database}'
        self.run_console(cmd)


BINARIES = {
    'mysql2': MySQLConsole,
    'postgres': PostgresConsole,
    'pgtop': Pgtop,
}

parser = ArgumentParser(description='DB console wrapper')
parser.add_argument('--env', metavar='FILE', type=str, help='Path to a dotenv file containing the variable for the database URL')
parser.add_argument('--env-var', metavar='VARNAME', type=str, default='DATABASE_URL', help='Name of the environment variable containing the database URL')
parser.add_argument('db_url', metavar='URL', type=str, nargs='?', help='The database URL')
autocomplete(parser)
args = parser.parse_args()

db_url = None

if args.db_url:
    db_url = args.db_url
elif args.env:
    if pathlib.Path(args.env).exists():
        database_url_lines = [l for l in open(args.env).readlines() if l.startswith('{}='.format(args.env_var))]
        if len(database_url_lines) > 0:
            db_url = database_url_lines[0].split('=', 1)[1]
        else:
            print('No {} definition found, skipping'.format(args.env_var))
    else:
        print('No dotenv file found, skipping')

if db_url is None:
    db_url = input('Enter URL: ')

DBConsole.from_url(db_url).run()
