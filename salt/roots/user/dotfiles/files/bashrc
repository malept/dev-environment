# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTTIMEFORMAT="%D %T "
HISTIGNORE="ls:exit"

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Only try to set PS1 if it's not already set with color
if ! echo "$PS1" | grep -qF '033['; then
    # set a fancy prompt (non-color, unless we know we "want" color)
    case "$TERM" in
        xterm-*color|tmux-*color) color_prompt=yes;;
    esac

    # uncomment for a colored prompt, if the terminal has the capability; turned
    # off by default to not distract the user: the focus in a terminal window
    # should be on the output of commands, not on the prompt
    force_color_prompt=yes

    if [ -n "$force_color_prompt" ]; then
        if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
        else
        color_prompt=
        fi
    fi

    if [ "$color_prompt" = yes ]; then
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    fi
    unset color_prompt force_color_prompt
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

_update_path() {
    local bin="$1"
    local mode="$2"

    if [[ -d "$bin" && "$PATH" != *"$bin"* ]]; then
        if [[ "$mode" = "prepend" ]]; then
            PATH="$bin:$PATH"
        else
            PATH="$PATH:$bin"
        fi
    fi
}

# set PATH so it includes user's private bin if it exists
_update_path "$HOME/.local/bin" prepend

# Android
ANDROID_SDK="/opt/android-sdk-linux"
if [[ -d "$ANDROID_SDK" && "$PATH" != *"$ANDROID_SDK"* ]] ; then
    PATH="$PATH:$ANDROID_SDK/tools:$ANDROID_SDK/platform-tools"
fi
unset ANDROID_SDK

# rustup
_update_path "$HOME/.cargo/bin" append

# dasht
_update_path "/opt/dasht/bin" append

# noisetorch
_update_path "/opt/noisetorch/bin" append

# Custom bin dirs
{%- for bin_dir, mode in salt['pillar.get']('bashrc:PATH', {}).items() %}
_update_path "{{ bin_dir }}" {{ mode }}
{%- endfor %}

unset _update_path

if which zoxide > /dev/null; then
    eval "$(zoxide init bash)"
fi

{% for env_var, env_value in salt['pillar.get']('bashrc:environment', {}).items() -%}
export {{ env_var }}={{ env_value }}
{% endfor -%}

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if which starship > /dev/null; then
    eval "$(starship init bash)"
fi

if which kubectl > /dev/null; then
    eval "$(kubectl completion bash)"
fi

if command -v stern > /dev/null; then
  source <(stern --completion bash)
fi

if [[ -d "$HOME/.asdf" ]]; then
    source $HOME/.asdf/asdf.sh
    source $HOME/.asdf/completions/asdf.bash
fi

{%- if salt['pillar.get']('aws:enabled') %}
export AWS_CONFIG_FILE="$HOME/.config/aws/config.ini"
export AWS_SHARED_CREDENTIALS_FILE="$HOME/.config/aws/credentials.ini"
{%- endif %}
export PSQLRC=$HOME/.config/psqlrc
