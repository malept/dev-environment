# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTTIMEFORMAT="%D %T "
HISTIGNORE="ls:exit"

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/.local/bin:$PATH"
fi

# globally installed node packages
if [ -d "/opt/node/bin" ] ; then
    PATH="$PATH:/opt/node/bin"
fi

# Android
ANDROID_SDK="/opt/android-sdk-linux"
if [ -d "$ANDROID_SDK" ] ; then
    PATH="$PATH:$ANDROID_SDK/tools:$ANDROID_SDK/platform-tools"
fi
unset ANDROID_SDK

# virtualenvwrapper
VIRTUALENVWRAPPER_SCRIPT="$(which virtualenvwrapper.sh)"
if [[ -n "$VIRTUALENVWRAPPER_SCRIPT" ]]; then
    WORKON_HOME="$HOME/.local/share/virtualenv"
    PROJECT_HOME="$HOME/Code"
    if [[ "$VIRTUALENVWRAPPER_SCRIPT" =~ "/.local/bin/" && -L "$VIRTUALENVWRAPPER_SCRIPT" ]]; then
        VIRTUALENVWRAPPER_PYTHON="$(dirname "$(readlink "$VIRTUALENVWRAPPER_SCRIPT")")/python"
    fi
    VIRTUALENVWRAPPER_LAZY="$(dirname "$VIRTUALENVWRAPPER_SCRIPT")/virtualenvwrapper_lazy.sh"
    if [[ -n "$VIRTUALENVWRAPPER_LAZY" ]]; then
        source "$VIRTUALENVWRAPPER_LAZY"
    else
        source "$VIRTUALENVWRAPPER_SCRIPT"
    fi
    unset VIRTUALENVWRAPPER_LAZY
fi

# rubygems
# See: https://github.com/rvm/rubygems-bundler/blob/ce619c06ec051a25bed6f0eb68bb6cd491054a70/README.md#note-for-rubygems--220
RUBYGEMS_GEMDEPS="-"

# RVM
if [[ -s "$HOME/.rvm/scripts/rvm" ]]; then
    . "$HOME/.rvm/scripts/rvm"  # This loads RVM into a shell session.
    PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
fi

# chruby
if [[ -f '/usr/share/chruby/chruby.sh' ]]; then
    source /usr/share/chruby/chruby.sh
    source /usr/share/chruby/auto.sh
    {%- set default_ruby_version = salt['pillar.get']('ruby:default_version', false) %}
    {%- if default_ruby_version %}
    chruby "{{ default_ruby_version }}"
    {%- endif %}
fi

# Ruby user bindir
if which ruby > /dev/null; then
    RUBY_USERBINDIR="$(ruby -e 'print Gem.bindir(Gem.user_dir)')"
    if [[ -d "$RUBY_USERBINDIR" ]]; then
        PATH="$PATH:$RUBY_USERBINDIR"
    fi
    unset RUBY_USERBINDIR
fi

# Travis CI CLI
[ -f $HOME/.travis/travis.sh ] && source $HOME/.travis/travis.sh

# rustup
[[ -d "$HOME/.cargo/bin" ]] && PATH="$PATH:$HOME/.cargo/bin"

# github's hub
[[ -d "/opt/github/bin" ]] && PATH="$PATH:/opt/github/bin"

# dasht
[[ -d "/opt/dasht/bin" ]] && PATH="$PATH:/opt/dasht/bin"

{%- if salt['pillar.get']('aws:enabled') %}
export AWS_CONFIG_FILE="$HOME/.config/aws/config.ini"
export AWS_SHARED_CREDENTIALS_FILE="$HOME/.config/aws/credentials.ini"
{%- endif %}
export PSQLRC=$HOME/.config/psqlrc

{% for env_var, env_value in salt['pillar.get']('bashrc:environment', {}).iteritems() -%}
export {{ env_var }}={{ env_value }}
{% endfor -%}
